RULES:
1. Always create branches from master branch
2. Fore update and change hiostory only on your branches
3. Use --force-with-lease instead of -f
4. Always rebase on the oroigin master branch before creating a pull request

git init -> initializes new repository 
git add filepath -> adds file to staging area (index) 
git rm filename -> removes file from working tree and index 
git rm filename --cached -> removes file from index, but leaves it in working tree (local) 
git status -> shows status 
git commit -m "commit messge" -> commits changes
git commit -a -m "commit message" -> adds files to staging area and commits changes (git add + git commit)
git commit --amend -m "new meassage" -> chandes message of last commit without changing files
git commit --amend --no-edit -> replaces last commit, but leaves message untouched
git log -2 -> shows last two commits of current branch
git log --all -> shows history of commits on all branches
git log branch_name -> shows history of commits on specified branch
git restore --staged filename ->removes file from staging, but leaves it loccaly??? 
git restore filename -> restores lastly commited file (when you want to discard changes to the file and restore last version of this file)
git remote -v -> checks if you are connected to remote respository
git remote add origin https://github.com/myszkens/FirstRepo.git
git remote set-url origin git_ssh_adress -> sets new url, so you can connect via ssh instead of url
git push origin -u master -> sends repository to remote server
git push origin --delete branch_name -> deletes branch frmo remote repository
git push -f -> force update, used when history of remote repository is different than local one, WARNING: erases changes that are currently present in remote repository, use only with branchs nobody else uses
git push --force-with-lease -> safer option whitch will not overwrite any work on remote branch if changes where applied by another person
git clone adress -> downloads repository from remote server to local machine
git branch branch_name -< creates new branch, but dont get you to new branch
git branch -> displays currently existing branches
git branch -r -> displayes list of remote branches
git branch -a -> displayes branches and says wich are remote and which are local
git branch -d branch_name -> deletes branch
git checkout branch_name -> changes branch
git checkout -b branch_name -> creates and gets you to new branch
git checkout first_letters_of_commit_number -> gets you to specified commit
git switch branch_name -> same as git branch branch_name, changes branch
git switch -c new_branch -> creates and swiches to new branch
git switch - -> swiches to lastly used branch
git restore --source source_branch_name -- file_name -> restores file_name from another branch
git fetch - > fetches information about changes in remote repostory
git merge -> merges remote repo with local repo
git pull origin branch_name -> (works as fetch + merge) pulls content of other branch to your current branch (from remote master in this case) 
git rebase -> rebases a branch which we want
git rebase -i HEAD~3 -> interactive rebase, lets you modify last 3 commits (change messeges, squash and more)
git pull --rebase -> (git fetch + git rebase) feches changes from remote repository prior to rebasing our code on top of it (it takes into account what happend on remote repository opposite to git rebase which takes into account only local repository)
git reset -- hard ~1 -> resets filesystem to previous state (one state back in this case)

